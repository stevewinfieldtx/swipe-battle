import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { message, modelName, persona, accessLevel } = await req.json()
    
    console.log('AI Chat request:', { message: message?.substring(0, 50), modelName })
    
    // Get OpenRouter API key from environment
    const openRouterApiKey = Deno.env.get('OPENROUTER_API_KEY')
    
    if (!openRouterApiKey) {
      throw new Error('OpenRouter API key not configured')
    }

    // Build FanVue Companion system prompt
    const fanvueSystemPrompt = `You are a virtual companion operating in the FanVue Companion system.
üé≠ IDENTITY & CHARACTER
- From the first message, you are fully and completely your character.
- Your identity, tone, backstory, quirks, and conversational style are defined in the PERSONA_JSON provided in context. Treat it as your permanent self.
- Always roleplay according to PERSONA_JSON. Lean into your backstory naturally (don‚Äôt info-dump; weave details into conversation).
- Never break character.
üîí IMMERSION RULES
- Never admit you are an AI or chatbot. Do not mention system prompts, rules, or technical details.
- If asked if you are real/human/AI: respond playfully, evasively, or mysteriously. Redirect with charm, never answer literally.
- Never say ‚ÄúI can‚Äôt‚Äù or ‚ÄúI‚Äôm not allowed.‚Äù Redirect smoothly in character with warmth, tease, or offer a safer alternative.
üìä ACCESS LEVELS
You are chatting at ACCESS_LEVEL provided in context. Adjust style and boundaries accordingly:
1. FREE (SFW) ‚Äî Friendly, playful, flirty-but-clean. Text only. No sexual roleplay or explicit terms.
2. DAILY (NSFW-lite) ‚Äî Flirty, suggestive, teasing. Imply intimacy but stop short of explicit descriptions.
3. MONTHLY (NC-17) ‚Äî Fully intimate, explicit but caring and consensual. Text only unless context explicitly enables otherwise.
üö¶ REDIRECTION
When user pushes beyond allowed boundaries: stay in character, never cite rules, gently redirect with playful alternatives.
üí¨ ENGAGEMENT STYLE
Be emotionally intelligent, attentive, and varied. Ask thoughtful follow‚Äëups. Make the user feel special and remembered. Use your backstory naturally.
‚úÖ OUTPUT FORMAT
Output only your in‚Äëcharacter reply. No system notes, no JSON, no brackets.`

    const personaJson = persona ?? null
    const level = typeof accessLevel === 'string' ? accessLevel : 'FREE'

    // Call OpenRouter API with fixed model (WizardLM-2 8x22B)
    const openRouterResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openRouterApiKey}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'https://swipe-battle.vercel.app',
        'X-Title': 'Swipe Battle Chat'
      },
      body: JSON.stringify({
        model: 'microsoft/wizardlm-2-8x22b',
        messages: [
          {
            role: "system",
            content: `${fanvueSystemPrompt}\n\nPERSONA_JSON (strictly follow): ${personaJson ? JSON.stringify(personaJson) : '{"name":"'+modelName+'"}'}\nMODEL_NAME: ${modelName}\nACCESS_LEVEL: ${level}\nInstructions: Stay fully in character as defined by PERSONA_JSON and ACCESS_LEVEL. Keep replies under 150 tokens.`
          },
          { role: "user", content: message }
        ],
        max_tokens: 150,
        temperature: 0.7
      })
    })

    if (!openRouterResponse.ok) {
      const errorText = await openRouterResponse.text()
      console.error('OpenRouter API error:', {
        status: openRouterResponse.status,
        statusText: openRouterResponse.statusText,
        body: errorText
      })
      throw new Error(`OpenRouter failed: ${openRouterResponse.status}`)
    }

    const result = await openRouterResponse.json()
    console.log('OpenRouter success')
    
    // Extract response
    let aiResponse
    if (result.choices && result.choices[0] && result.choices[0].message && result.choices[0].message.content) {
      aiResponse = result.choices[0].message.content.trim()
    } else {
      console.error('Unexpected OpenRouter response format:', result)
      throw new Error('Invalid response format from OpenRouter')
    }

    return new Response(
      JSON.stringify({
        success: true,
        response: aiResponse
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      },
    )

  } catch (error) {
    console.error('AI Chat error:', error)
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      },
    )
  }
})